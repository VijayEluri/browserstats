Command-line arguments: [options] [input file(s)]

The system writes output files with the same name as the input file, except
with '.knownagents' extension. (This will replace an existing '.useragents'
extension if present, otherwise will be appended.)

Input options
-------------

-stdin
  Read data from stdin instead of files. (Implies -stdout.)

-test selftest
  [Does not require log files.]

  Tests that the internal user-agent list is internally consistent.

-test unmatched {count}
  Prints list of all user-agents that didn't match any known agent, and were
  involved in at least the specified number of requests. Shows agents along
  with the count of requests for that agent, and a summary of the number and
  percentage of matched/unmatched agents and counts.

-test partial
  Prints list (showing user agent and partial details) for everything
  that was partially matched, organised by the details of the partial match.
  A partial match is when a browser was partly identified (for example, if
  we detected it as Firefox, but the version isn't recognised). During normal
  processing, these are counted as unmatched.

-test showagent {type} {engine} {name} {version} {os}
  Shows user-agent strings for all agents that were matched according to the
  specified values, which are regular expressions; use "" if you don't care
  about any value. Useful for testing that matching is working as expected,
  for example for common agents such as IE 6; some other agents produce
  strings that look like these browsers.

-test showagentselected {type} {engine} {name} {version} {os}
  Same as -test showagent, but shows the user-agent strings categorised by
  pattern (different numbers or words are treated as equivalent; only the
  pattern of text and whitespace is considered). When there are more than
  three examples of the same pattern, only three are shown. The results are
  also ordered by pattern, which may mean that related entries are together.
  This is useful for some browsers (mainly those other than IE) where the size
  of output can be significantly less than with plain -test showagent.

-test identify {agent}
  [Does not require log files.]
  
  Shows how the given user-agent string would be matched. (On the command line,
  you will need to put quotes around the user-agent string so that it is
  treated as a single argument.)

-- 
  Indicate that this is the end of the options section (required if the first 
  input file starts with a -).

@{file}
  Read arguments from a file instead of the command line. You can combine
  this usage with command-line options. Using a file is highly recommended if
  you need to specify any of the complex options with regular expressions in.
  
  When arguments are specified in a file, one single argument must be specified
  per line of the file. For example, "-format tomcat" must be written on two
  lines. You can include # at the start of a line for comments; blank lines
  are OK.  

Output options
--------------

-stdout
  Write output to standard output instead of to a file. This does not need
  to be specified if you specify -stdin.

-folder {folder}
  Place output files in the specified folder instead of in the same folder as
  input files.

-overwrite
  Overwrite existing output files. (Without specifying this option, if the 
  system would otherwise overwrite an existing file, it exits with an error.)

